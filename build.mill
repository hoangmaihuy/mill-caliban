//| mvnDeps:
//| - com.lihaoyi::mill-contrib-buildinfo:$MILL_VERSION
//| - com.lihaoyi::mill-contrib-artifactory:$MILL_VERSION

import mill.*
import mill.scalalib.*
import mill.scalalib.publish.*
import mill.contrib.buildinfo.*
import mill.main.VcsVersion
import mill.util.BuildInfo.{millVersion, millBinPlatform}

object Versions {
  lazy val scala = "3.7.0"
  lazy val caliban = "2.10.0"
}

object `mill-caliban` extends ScalaModule with SonatypeCentralPublishModule with BuildInfo {

  override def publishVersion = "0.3.0-RC1"

  override def scalaVersion = Versions.scala

  override def versionScheme: T[Option[VersionScheme]] = Task(Option(VersionScheme.EarlySemVer))

  override def pomSettings = PomSettings(
    description = "Caliban codegen plugin for Mill",
    organization = "io.github.hoangmaihuy",
    url = "https://github.com/hoangmaihuy/mill-caliban",
    licenses = Seq(License.`Apache-2.0`),
    versionControl = VersionControl.github(owner = "hoangmaihuy", repo = "mill-caliban"),
    developers = Seq(Developer("hoangmaihuy", "Hoang Mai", "https://github.com/hoangmaihuy"))
  )

  override def artifactName = "mill-caliban"

  override def platformSuffix = s"_mill$millBinPlatform"

  override def scalacOptions = Seq("-Wunused:all", "-deprecation")

  override def compileMvnDeps = super.compileMvnDeps() ++ Seq(
    mvn"com.lihaoyi::mill-libs-scalalib:$millVersion"
  )

  override def mvnDeps = super.mvnDeps() ++ Seq(
    mvn"com.github.ghostdogpr::caliban-tools:${Versions.caliban}"
  )

  override def buildInfoMembers = Seq(
    BuildInfo.Value("calibanVersion", Versions.caliban)
  )

  override def buildInfoObjectName = "CalibanBuildInfo"
  override def buildInfoPackageName = "io.github.hoangmaihuy.mill.caliban"

  // Testing Config, with necessary setup for unit/integration/example tests
  object test extends ScalaTests with TestModule.Utest {
    def mvnDeps = Seq(mvn"com.lihaoyi::mill-testkit:$millVersion")

    def forkEnv = Task {
      val p = Task.dest / "mill/local-test-overrides" / s"com.lihaoyi-${`mill-caliban`.artifactId()}"
      os.write(
        p,
        `mill-caliban`.localClasspath().map(_.path).mkString("\n"),
        createFolders = true
      )
      Map(
        "MILL_EXECUTABLE_PATH" -> millExecutable.assembly().path.toString,
        "MILL_LOCAL_TEST_OVERRIDE_CLASSPATH" ->
          (sys.env.get("MILL_LOCAL_TEST_OVERRIDE_CLASSPATH") ++ Seq(Task.dest)).mkString(";")
      )
    }

    // Create a Mill executable configured for testing our plugin
    object millExecutable extends JavaModule {
      def mvnDeps = Seq(mvn"com.lihaoyi:mill-runner-launcher_3:$millVersion")

      def mainClass = Some("mill.launcher.MillLauncherMain")
    }

  }

}
